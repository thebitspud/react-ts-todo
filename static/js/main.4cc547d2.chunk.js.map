{"version":3,"sources":["components/Task.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Task","props","useState","showDetails","setShowDetails","className","style","borderRightColor","task","color","onClick","name","onComplete","desc","Date","date","toUTCString","substr","App","setName","setDesc","toISOString","setDate","setColor","showInputs","setShowInputs","useCookies","cookies","setCookies","tasks","taskList","setTaskList","handleInputChange","event","target","value","Error","completeTask","nameToDelete","listRef","filter","updateCookies","path","console","log","id","map","key","type","placeholder","onChange","length","nextTask","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById"],"mappings":"mRAoCeA,MA3Bf,SAAcC,GACZ,MAAsCC,oBAAkB,GAAxD,mBAAOC,EAAP,KAAoBC,EAApB,KAMA,OACE,sBAAKC,UAAU,OAAOC,MAAO,CAAEC,iBAAkBN,EAAMO,KAAKC,OAA5D,UACE,oBAAIJ,UAAU,cAAcK,QANV,WACpBN,GAAgBD,IAKd,SACGF,EAAMO,KAAKG,OAEd,wBAAQN,UAAU,SAASK,QAAS,kBAAMT,EAAMW,WAAWX,EAAMO,KAAKG,OAAtE,oBAGCR,EACC,sBAAKE,UAAU,UAAf,UACE,8BAAMJ,EAAMO,KAAKK,OACjB,uBACA,8BAAM,IAAIC,KAAKb,EAAMO,KAAKO,MAAMC,cAAcC,OAAO,EAAG,MACxD,8BAAMhB,EAAMO,KAAKC,WAEjB,S,QCyGKS,MAlIf,WAAgB,IAAD,EACb,EAAwBhB,mBAAiB,IAAzC,mBAAOS,EAAP,KAAaQ,EAAb,KACA,EAAwBjB,mBAAiB,IAAzC,mBAAOW,EAAP,KAAaO,EAAb,KACA,EAAwBlB,oBAAiB,IAAIY,MAAOO,cAAcJ,OAAO,EAAG,KAA5E,mBAAOF,EAAP,KAAaO,EAAb,KACA,EAA0BpB,mBAAiB,WAA3C,mBAAOO,EAAP,KAAcc,EAAd,KACA,EAAoCrB,oBAAkB,GAAtD,mBAAOsB,EAAP,KAAmBC,EAAnB,KACA,EAA8BC,YAAW,CAAC,UAA1C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgC1B,mBAAQ,UAAayB,EAAQE,aAArB,QAA8B,IAAtE,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAoB,SAACC,GACzB,OAAQA,EAAMC,OAAOvB,MACnB,IAAK,OACHQ,EAAQc,EAAMC,OAAOC,OACrB,MACF,IAAK,OACHb,EAAQW,EAAMC,OAAOC,OACrB,MACF,IAAK,QACHZ,EAASU,EAAMC,OAAOC,OACtB,MACF,QACE,MAAM,IAAIC,MAAJ,mCAAsCH,EAAMC,OAAOvB,SAqCzD0B,EAAe,SAACC,GAEpB,IAAMC,EAAUT,EAASU,QAAO,SAAChC,GAAD,OAAUA,EAAKG,OAAS2B,KACxDP,EAAYQ,GACZE,EAAcF,IAOVE,EAAgB,SAACF,GACrBX,EAAW,QAASW,EAAS,CAAEG,KAAM,MACrCC,QAAQC,IAAIL,IAGd,OACE,sBAAKlC,UAAU,MAAf,UACE,qBAAKwC,GAAG,YAAR,SACGf,EAASgB,KAAI,SAACtC,EAAgBuC,GAC7B,OAAO,cAAC,EAAD,CAAgBvC,KAAMA,EAAMI,WAAYyB,GAA7BU,QAGtB,sBAAKF,GAAG,YAAR,UACE,oBAAIA,GAAG,SAASnC,QAjBD,WACnBe,GAAeD,IAgBX,6BAGCA,EACC,sBAAKqB,GAAG,SAAR,UACE,uBACEG,KAAK,OACLrC,KAAK,OACLwB,MAAOxB,EACPsC,YAAY,YACZC,SAAUlB,IAEZ,uBACEgB,KAAK,OACLrC,KAAK,OACLwB,MAAOpB,EACPkC,YAAY,WACZC,SAAUlB,IAEZ,0BACErB,KAAK,OACLwB,MAAOtB,EACPoC,YAAY,cACZC,SAhFiB,SAACjB,GAC5B,OAAQA,EAAMC,OAAOvB,MACnB,IAAK,OACHS,EAAQa,EAAMC,OAAOC,OACrB,MACF,QACE,MAAM,IAAIC,MAAJ,sCAAyCH,EAAMC,OAAOvB,WA4ExD,sBAAKN,UAAU,YAAf,UACE,uBACE2C,KAAK,QACLrC,KAAK,QACLwB,MAAO1B,EACPwC,YAAY,aACZC,SAAUlB,IAEZ,wBAAQtB,QAhFJ,WAEd,GAAa,KAATC,EAIJ,GAA0B,IADTmB,EAASU,QAAO,SAAChC,GAAD,OAAUA,EAAKG,OAASA,KAC1CwC,OAAf,CAKA,IAAMC,EAAqB,CAAEzC,OAAME,OAAME,OAAMN,SAGzC8B,EAAO,sBAAOT,GAAP,CAAiBsB,IAC9BrB,EAAYQ,GACZE,EAAcF,GAGdpB,EAAQ,IACRC,EAAQ,SAbND,EAAQ,KAyEA,4BAGF,QAEN,oBAAG0B,GAAG,SAAN,uCAC6B,IAC3B,mBAAGQ,KAAK,8CAA8CnB,OAAO,SAA7D,+CClHOoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.4cc547d2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { TaskData } from \"../types\";\nimport \"../styles/Task.css\";\n\ntype TaskProps = {\n  task: TaskData;\n  onComplete(nameToDelete: string): void;\n};\n\nfunction Task(props: TaskProps) {\n  const [showDetails, setShowDetails] = useState<boolean>(true);\n\n  const toggleDetails = () => {\n    setShowDetails(!showDetails);\n  };\n\n  return (\n    <div className=\"Task\" style={{ borderRightColor: props.task.color }}>\n      <h2 className=\"task-header\" onClick={toggleDetails}>\n        {props.task.name}\n      </h2>\n      <button className=\"delete\" onClick={() => props.onComplete(props.task.name)}>\n        &#x2715;\n      </button>\n      {showDetails ? (\n        <div className=\"details\">\n          <div>{props.task.desc}</div>\n          <br />\n          <div>{new Date(props.task.date).toUTCString().substr(0, 16)}</div>\n          <div>{props.task.color}</div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default Task;\n","import React, { ChangeEvent, useState } from \"react\";\nimport \"../styles/App.css\";\nimport Task from \"./Task\";\nimport { TaskData } from \"../types\";\nimport { useCookies } from \"react-cookie\";\n\nfunction App() {\n  const [name, setName] = useState<string>(\"\");\n  const [desc, setDesc] = useState<string>(\"\");\n  const [date, setDate] = useState<string>(new Date().toISOString().substr(0, 10));\n  const [color, setColor] = useState<string>(\"#ff8080\");\n  const [showInputs, setShowInputs] = useState<boolean>(true);\n  const [cookies, setCookies] = useCookies([\"tasks\"]);\n  const [taskList, setTaskList] = useState<TaskData[]>(cookies.tasks ?? []);\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    switch (event.target.name) {\n      case \"name\":\n        setName(event.target.value);\n        break;\n      case \"date\":\n        setDate(event.target.value);\n        break;\n      case \"color\":\n        setColor(event.target.value);\n        break;\n      default:\n        throw new Error(`Unexpected input change: ${event.target.name}`);\n    }\n  };\n\n  const handleTextAreaChange = (event: ChangeEvent<HTMLTextAreaElement>): void => {\n    switch (event.target.name) {\n      case \"desc\":\n        setDesc(event.target.value);\n        break;\n      default:\n        throw new Error(`Unexpected textarea change: ${event.target.name}`);\n    }\n  };\n\n  const addTask = (): void => {\n    // Task name is mandatory, other fields optional\n    if (name === \"\") return;\n\n    // Do not create tasks with duplicate names\n    let getMatches = taskList.filter((task) => task.name === name);\n    if (getMatches.length !== 0) {\n      setName(\"\");\n      return;\n    }\n\n    const nextTask: TaskData = { name, desc, date, color };\n\n    // Adding nextTask to the existing task list\n    const listRef = [...taskList, nextTask];\n    setTaskList(listRef);\n    updateCookies(listRef);\n\n    // Resetting input fields\n    setName(\"\");\n    setDesc(\"\");\n  };\n\n  const completeTask = (nameToDelete: string): void => {\n    // Deleting task\n    const listRef = taskList.filter((task) => task.name !== nameToDelete);\n    setTaskList(listRef);\n    updateCookies(listRef);\n  };\n\n  const toggleInputs = () => {\n    setShowInputs(!showInputs);\n  };\n\n  const updateCookies = (listRef: TaskData[]) => {\n    setCookies(\"tasks\", listRef, { path: \"/\" });\n    console.log(listRef);\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"task-list\">\n        {taskList.map((task: TaskData, key: number) => {\n          return <Task key={key} task={task} onComplete={completeTask} />;\n        })}\n      </div>\n      <div id=\"next-item\">\n        <h1 id=\"header\" onClick={toggleInputs}>\n          Add Task &#9662;\n        </h1>\n        {showInputs ? (\n          <div id=\"inputs\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              placeholder=\"Task Name\"\n              onChange={handleInputChange}\n            />\n            <input\n              type=\"date\"\n              name=\"date\"\n              value={date}\n              placeholder=\"Due Date\"\n              onChange={handleInputChange}\n            />\n            <textarea\n              name=\"desc\"\n              value={desc}\n              placeholder=\"Description\"\n              onChange={handleTextAreaChange}\n            />\n            <div className=\"split-row\">\n              <input\n                type=\"color\"\n                name=\"color\"\n                value={color}\n                placeholder=\"Task Color\"\n                onChange={handleInputChange}\n              />\n              <button onClick={addTask}>Add Item</button>\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <p id=\"footer\">\n        This website uses cookies.{\" \"}\n        <a href=\"https://github.com/thebitspud/react-ts-todo\" target=\"_blank\">\n          Made by Thebitspud (2021).\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport { CookiesProvider } from \"react-cookie\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <App />\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(/*console.log*/);\n"],"sourceRoot":""}