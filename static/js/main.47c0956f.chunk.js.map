{"version":3,"sources":["components/Task.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Task","props","className","style","borderRightColor","task","color","margin","name","desc","Date","date","toDateString","onClick","onComplete","App","useState","setName","setDesc","toLocaleDateString","setDate","setColor","taskList","setTaskList","handleInputChange","event","target","value","Error","completeTask","nameToDelete","filter","id","map","key","type","placeholder","onChange","length","nextTask","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47c0956f.chunk.js","sourcesContent":["import React from \"react\";\nimport { TaskData } from \"../types\";\nimport \"../styles/Task.css\";\n\ntype TaskProps = {\n  task: TaskData;\n  onComplete(nameToDelete: string): void;\n};\n\nconst Task = (props: TaskProps) => (\n  <div className=\"Task\" style={{ borderRightColor: props.task.color }}>\n    <h2 className=\"task-header\" style={{ margin: 0 }}>\n      {props.task.name}\n    </h2>\n    <div>{props.task.desc}</div>\n    <br />\n    <div>{new Date(props.task.date).toDateString()}</div>\n    <div>{props.task.color}</div>\n    <button className=\"delete\" onClick={() => props.onComplete(props.task.name)}>\n      &#x2715;\n    </button>\n  </div>\n);\n\nexport default Task;\n","import React, { ChangeEvent, useState } from \"react\";\nimport \"../styles/App.css\";\nimport Task from \"./Task\";\nimport { TaskData } from \"../types\";\n\nfunction App() {\n  const [name, setName] = useState<string>(\"\");\n  const [desc, setDesc] = useState<string>(\"\");\n  const [date, setDate] = useState<string>(new Date().toLocaleDateString(\"en-CA\"));\n  const [color, setColor] = useState<string>(\"#ff8080\");\n  const [taskList, setTaskList] = useState<TaskData[]>([]);\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    switch (event.target.name) {\n      case \"name\":\n        setName(event.target.value);\n        break;\n      case \"date\":\n        setDate(event.target.value);\n        break;\n      case \"color\":\n        setColor(event.target.value);\n        break;\n      default:\n        throw new Error(`Unexpected input change: ${event.target.name}`);\n    }\n  };\n\n  const handleTextAreaChange = (event: ChangeEvent<HTMLTextAreaElement>): void => {\n    switch (event.target.name) {\n      case \"desc\":\n        setDesc(event.target.value);\n        break;\n      default:\n        throw new Error(`Unexpected textarea change: ${event.target.name}`);\n    }\n  };\n\n  const addTask = (): void => {\n    // Task name is mandatory, other fields optional\n    if (name === \"\") return;\n\n    // Do not create tasks with duplicate names\n    let getMatches = taskList.filter((task) => task.name === name);\n    if (getMatches.length !== 0) {\n      setName(\"\");\n      return;\n    }\n\n    const nextTask: TaskData = {\n      name: name,\n      desc: desc,\n      date: date,\n      color: color,\n    };\n\n    // Adding nextTask to the existing task list\n    console.log(nextTask);\n    setTaskList([...taskList, nextTask]);\n\n    // Resetting input fields\n    setName(\"\");\n    setDesc(\"\");\n  };\n\n  const completeTask = (nameToDelete: string): void => {\n    setTaskList(taskList.filter((task) => task.name !== nameToDelete));\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"task-list\">\n        {taskList.map((task: TaskData, key: number) => {\n          return <Task key={key} task={task} onComplete={completeTask} />;\n        })}\n      </div>\n      <div id=\"next-item\">\n        <h1 className=\"header\">Add Task</h1>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Task Name\"\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"date\"\n          name=\"date\"\n          value={date}\n          placeholder=\"Due Date\"\n          onChange={handleInputChange}\n        />\n        <textarea\n          name=\"desc\"\n          value={desc}\n          placeholder=\"Description\"\n          onChange={handleTextAreaChange}\n        />\n        <div className=\"split-row\">\n          <input\n            type=\"color\"\n            name=\"color\"\n            value={color}\n            placeholder=\"Task Color\"\n            onChange={handleInputChange}\n          />\n          <button onClick={addTask}>Add Item</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(/*console.log*/);\n"],"sourceRoot":""}